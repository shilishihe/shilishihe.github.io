<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Google Firebase Flutter项目实践</title>
    <link href="/2025/08/15/Google-Firebase-Flutter%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/"/>
    <url>/2025/08/15/Google-Firebase-Flutter%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="Google-Firebase-Flutter项目实践"><a href="#Google-Firebase-Flutter项目实践" class="headerlink" title="Google Firebase Flutter项目实践"></a>Google Firebase Flutter项目实践</h1><h2 id="Crashlytics"><a href="#Crashlytics" class="headerlink" title="Crashlytics"></a>Crashlytics</h2><blockquote><p>这是我们的报错统计插件，非常实用的一个插件，可以监测到你在线上的崩溃和错误 ❌ 问题，类似于Bugly功能。</p></blockquote><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li><p>在 Flutter 项目中<a href="https://firebase.google.com/docs/flutter/setup?authuser=0">配置并初始化 Firebase</a>（如果尚未执行此操作）。</p></li><li><p><strong>建议做法</strong>：如需使用“未遇到崩溃问题的用户”、“面包屑导航日志”和“疾速崩溃提醒”等功能，您需要在 Firebase 项目中启用 Google Analytics（分析）。</p><p>Crashlytics 支持的所有 Android 和 Apple 平台（watchOS 除外）都可以利用 Google Analytics（分析）中的这些功能。</p><p>确保您的 Firebase 项目中启用了 Google Analytics（分析）：前往 settings &gt;“项目设置”&gt;“集成”标签页，然后按照 Google Analytics（分析）对应的屏幕上的说明进行操作。</p></li></ol><h2 id="第-1-步：将-Crashlytics-添加到您的-Flutter-项目"><a href="#第-1-步：将-Crashlytics-添加到您的-Flutter-项目" class="headerlink" title="第 1 步：将 Crashlytics 添加到您的 Flutter 项目"></a><strong>第 1 步</strong>：将 Crashlytics 添加到您的 Flutter 项目</h2><ol><li><p>从 Flutter 项目的根目录运行以下命令，安装 Crashlytics Flutter 插件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">flutter pub add firebase_crashlytics<br></code></pre></td></tr></table></figure></li><li><p>从 Flutter 项目的根目录运行以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">flutterfire configure<br></code></pre></td></tr></table></figure><p>运行此命令可确保您的 Flutter 应用的 Firebase 配置是最新的，对于 Android，还会向您的应用添加所需的 Crashlytics Gradle 插件。</p></li><li><p>完成后，重新构建您的 Flutter 项目：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">flutter run<br></code></pre></td></tr></table></figure></li></ol><h2 id="第-2-步：配置崩溃处理程序"><a href="#第-2-步：配置崩溃处理程序" class="headerlink" title="第 2 步：配置崩溃处理程序"></a><strong>第 2 步</strong>：配置崩溃处理程序</h2><p>您可以使用 <code>FirebaseCrashlytics.instance.recordFlutterFatalError</code> 替换 <code>FlutterError.onError</code>，自动捕获 Flutter 框架中抛出的所有错误：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() <span class="hljs-keyword">async</span> &#123;<br>  WidgetsFlutterBinding.ensureInitialized();<br><br>  <span class="hljs-keyword">await</span> Firebase.initializeApp();<br><br>  <span class="hljs-comment">// Pass all uncaught errors from the framework to Crashlytics.</span><br>  FlutterError.onError = FirebaseCrashlytics.instance.recordFlutterFatalError;<br><br>  runApp(MyApp());<br>&#125;<br></code></pre></td></tr></table></figure><p>如果您使用区域 (zone)，则对区域的错误处理程序进行插桩 (instrument) 后，系统将捕获 Flutter 框架（例如，在按钮的 <code>onPressed</code> 处理程序中）未捕获的错误：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> main() <span class="hljs-keyword">async</span> &#123;<br>  runZonedGuarded&lt;Future&lt;<span class="hljs-keyword">void</span>&gt;&gt;(() <span class="hljs-keyword">async</span> &#123;<br>    WidgetsFlutterBinding.ensureInitialized();<br>    <span class="hljs-keyword">await</span> Firebase.initializeApp();<br><br>    FlutterError.onError =<br>       FirebaseCrashlytics.instance.recordFlutterFatalError;<br><br>    runApp(MyApp());<br>  &#125;, (error, stack) =&gt;<br>    FirebaseCrashlytics.instance.recordError(error, stack, fatal: <span class="hljs-keyword">true</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>如需查看有关如何处理其他类型错误的示例，请参阅<a href="https://firebase.google.com/docs/crashlytics/customize-crash-reports?platform=flutter&authuser=0">自定义崩溃报告</a>。</p><h2 id="第-3-步：强制造成一次测试崩溃以完成设置"><a href="#第-3-步：强制造成一次测试崩溃以完成设置" class="headerlink" title="第 3 步：强制造成一次测试崩溃以完成设置"></a><strong>第 3 步</strong>：强制造成一次测试崩溃以完成设置</h2><p>如需完成 Crashlytics 设置并在 Firebase 控制台的 Crashlytics 信息中心内查看初始数据，您需要强制抛出一个测试异常。</p><ol><li><p>向您的应用添加可用于强制抛出测试异常的代码。</p><p>如果您添加了一个对顶级 <code>Zone</code> 调用 <code>FirebaseCrashlytics.instance.recordError(error, stack, fatal: true)</code> 的错误处理程序，可以使用以下代码向应用添加一个按下即会抛出测试异常的按钮：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart">TextButton(<br>    onPressed: () =&gt; <span class="hljs-keyword">throw</span> Exception(),<br>    child: <span class="hljs-keyword">const</span> Text(<span class="hljs-string">&quot;Throw Test Exception&quot;</span>),<br>),<br></code></pre></td></tr></table></figure></li><li><p>构建并运行您的应用。</p></li><li><p>强制抛出测试异常，以便发送您的应用的第一个报告：</p><ol><li>在测试设备或模拟器上打开应用。</li><li>在您的应用中，按下您使用上述代码添加的测试异常按钮。</li></ol></li><li><p>前往 Firebase 控制台的 <a href="https://console.firebase.google.com/project/_/crashlytics?authuser=0">Crashlytics 信息中心</a>，查看您的测试崩溃报告。</p><p>如果您已刷新控制台，但在五分钟后仍未看到测试崩溃报告，请<a href="https://firebase.google.com/docs/crashlytics/test-implementation?authuser=0#enable-debug-logging">启用调试日志记录</a>，查看您的应用是否正在发送崩溃报告。</p></li></ol><p>大功告成！Crashlytics 现在会监控您的应用是否发生崩溃，以及 Android 中的非严重错误和 ANR。您可以访问 <a href="https://console.firebase.google.com/project/_/crashlytics?authuser=0">Crashlytics 信息中心</a>，查看和调查所有报告和统计信息。</p><h2 id="实际体验问题"><a href="#实际体验问题" class="headerlink" title="实际体验问题"></a>实际体验问题</h2><ul><li>公司wifi网络情况下，上报接口异常</li><li>蜂窝网络情况下，启动时候上报正常，使用期间上报接口异常</li><li>蜂窝网络情况下，手机蓝灯app开代理，启动时候上报正常，使用期间上报接口正常</li></ul><blockquote><p><a href="https://firebaselogging-pa.googleapis.com/v1/firelog/legacy/batchlog">https://firebaselogging-pa.googleapis.com/v1/firelog/legacy/batchlog</a><br>Status Code: 200</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/08/15/hello-world/"/>
    <url>/2025/08/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
